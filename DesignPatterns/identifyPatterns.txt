ðŸ”¹ Creating objects? â†’ Go with Creational Patterns
ðŸ”¹ Structuring relationships? â†’ Use Structural Patterns. Concerned with object composition, i.e., how classes and objects can be combined to form larger structures.
ðŸ”¹ Managing behavior or flow? â†’ You need Behavioral Patterns. Focus on communication between objects, helping them interact in flexible and maintainable ways.


1. Creational Design Patterns
Purpose: Deal with object creation mechanisms, trying to create objects in a manner suitable to the situation.

Key Patterns:
1. Singleton	Ensures a class has only one instance and provides a global point of access to it.
2. Factory Method	Defines an interface for creating an object but lets subclasses decide which class to instantiate.
3. Abstract Factory	Provides an interface for creating families of related or dependent objects without specifying their concrete classes.
4. Builder	Separates the construction of a complex object from its representation.
5. Prototype	Creates new objects by cloning existing ones.


2. Structural Design Patterns
Purpose: Concerned with object composition, i.e., how classes and objects can be combined to form larger structures.

Key Patterns:
1. Adapter	Converts one interface into another that a client expects.
2. Bridge	Separates an objectâ€™s abstraction from its implementation so they can vary independently.
3. Composite	Composes objects into tree structures to represent part-whole hierarchies.
4. Decorator	Adds responsibilities to objects dynamically without subclassing.
5. Facade	Provides a simplified interface to a complex subsystem.
6. Flyweight	Reduces memory usage by sharing common parts of state across many objects.
7. Proxy	Provides a surrogate or placeholder for another object.


3. Behavioral Design Patterns
Purpose: Focus on communication between objects, helping them interact in flexible and maintainable ways.

Key Patterns:
1. Observer	Notifies multiple objects of changes to another objectâ€™s state.
2. Strategy	Defines a family of algorithms and makes them interchangeable.
3. Command	Encapsulates a request as an object.
4. Chain of Responsibility	Passes a request along a chain of handlers.
5. State	Allows an object to alter its behavior when its internal state changes.
6. Template Method	Defines the skeleton of an algorithm and lets subclasses override steps.
7. Mediator	Encapsulates how a set of objects interact, promoting loose coupling.
8. Visitor	Lets you define new operations without changing the classes on which it operates.
9. Iterator	Provides a way to access elements of a collection without exposing its structure.
Memento	Captures and restores an objectâ€™s internal state.
Interpreter	Implements a grammar for interpreting expressions.